### app file ending ###
# $(MAKE_CALL) code here 
!ifndef 0 # \
EXE_FILETYPE=.exe # \
FD=\ #
!else
# Make code here 
EXE_FILETYPE=# 
FD=/#
#
!endif



##### CONSTANT BOILER PLATE #######
DIRPATH=.$(FD)src
BINPATH=.$(FD)bin
OBJPATH=.$(FD)obj
TESTPATH=.$(FD)test
TEST_BINPATH=$(BINPATH)
TEST_OBJPATH=$(TESTPATH)$(FD)obj

FILENAME=euler_project
TESTNAME=test_$(FILENAME)


INCL= 
CC=gcc
CFLAGS= #-I $(INCL)


TESTBIN=$(TEST_OBJPATH)$(FD)$(TESTNAME).o
CTEST=$(TESTPATH)$(FD)$(TESTNAME).c
TEST_EXE=$(TEST_BINPATH)$(FD)$(TESTNAME)$(EXE_FILETYPE)

SOURCES = $(CTEST)
APPS = $(TEST_EXE)

FILEBIN=$(OBJPATH)$(FD)$(FILENAME).o
CFILE=$(DIRPATH)$(FD)$(FILENAME).c
FILE_EXE=$(BINPATH)$(FD)$(FILENAME)$(EXE_FILETYPE)

SOURCES = $(SOURCES) $(CFILE)
APPS = $(APPS) $(FILE_EXE)


##### VARYING FILE BOILER PLATE #######
PROJECT_PATH=$(DIRPATH)$(FD)project
BASENAME=project


OBJ1NAME=base
OBJ1SRC=$(PROJECT_PATH)$(FD)$(OBJ1NAME).c
OBJ1=$(OBJPATH)$(FD)$(OBJ1NAME).o

SOURCES = $(SOURCES) $(OBJ1SRC)
OBJECTS = $(OBJECTS) $(OBJ1)
OBJBUILDS = 1


OBJ2NAME=$(BASENAME)_one
OBJ2SRC=$(PROJECT_PATH)$(FD)$(OBJ2NAME).c
OBJ2=$(OBJPATH)$(FD)$(OBJ2NAME).o

SOURCES = $(SOURCES) $(OBJ2SRC)
OBJECTS = $(OBJECTS) $(OBJ2)
OBJBUILDS = 2




##### VARYING FILE BOILER PLATE #######
TEST_OBJ1NAME=test
TEST_OBJ1SRC=$(TESTPATH)$(FD)$(TEST_OBJ1NAME).c
TEST_OBJ1=$(TEST_OBJPATH)$(FD)$(TEST_OBJ1NAME).o

SOURCES = $(SOURCES) $(TEST_OBJ1SRC)
TEST_OBJECTS = $(TEST_OBJECTS) $(TEST_OBJ1)
TEST_OBJBUILDS = 1


TEST_PROJECT_PATH=$(TESTPATH)$(FD)project

TEST_OBJ2NAME=test_$(OBJ1NAME)
TEST_OBJ2SRC=$(TEST_PROJECT_PATH)$(FD)$(TEST_OBJ2NAME).c
TEST_OBJ2=$(TEST_OBJPATH)$(FD)$(TEST_OBJ2NAME).o

SOURCES = $(SOURCES) $(TEST_OBJ2SRC)
TEST_OBJECTS = $(TEST_OBJECTS) $(TEST_OBJ2)
TEST_OBJBUILDS = 2


TEST_OBJ3NAME=test_$(OBJ2NAME)
TEST_OBJ3SRC=$(TEST_PROJECT_PATH)$(FD)$(TEST_OBJ3NAME).c
TEST_OBJ3=$(TEST_OBJPATH)$(FD)$(TEST_OBJ3NAME).o

#SOURCES = $(SOURCES) $(TEST_OBJ3SRC)
#TEST_OBJECTS = $(TEST_OBJECTS) $(TEST_OBJ3)
#TEST_OBJBUILDS = 3



# Code below should allow $(MAKE_CALL) and make to operate successfully
# $(MAKE_CALL) code here $(FD)
!ifndef 0# $(FD)
MV = move # $(FD)
RM=del # $(FD)
RMDIR=rmdir # $(FD)
CP=copy # $(FD)
MAKE_CALL=nmake # $(FD)
IF_FILE=IF EXIST # $(FD)
THEN_DO= # $(FD)
IF_NOT_FILE=IF NOT EXIST # $(FD)
IF_NOT_THEN_DO= # $(FD)
IF_DIR=$(IF_FILE) # $(FD)
IF_NOT_DIR=$(IF_NOT_FILE)
INSERT_FILE= call > # $(FD)
EMPTY_TXT=empty.txt # $(FD)
!else
ifeq (0,0) #
# Make code here 
MV=mv -f # 
RM=rm -f #
RMDIR=rm -rf #
CP=cp -f # 
MAKE_CALL=make #
IF_FILE=test -f #
THEN_DO= && #
IF_NOT_FILE=$(IF_FILE) #
IF_NOT_THEN_DO= || #
IF_DIR=test -d # $(FD)
IF_NOT_DIR=$(IF_DIR) #
INSERT_FILE= ># 
EMPTY_TXT=.empty.txt #
endif #
# $(FD)
!endif






##### CONSTANT BUILD #######
MAKE: $(FILEBIN) $(TESTBIN) $(OBJECTS) $(TEST_OBJECTS)
	$(CC) $(CFLAGS) $(TESTBIN) $(OBJECTS) $(TEST_OBJECTS) -o $(TEST_EXE)
	$(CC) $(CFLAGS) $(FILEBIN) $(OBJECTS) -o $(FILE_EXE)
	$(MAKE_CALL) clean_up

MAKE_OBJ: $(FILEBIN) $(TESTBIN) $(OBJECTS)
	$(CC) $(CFLAGS) $(FILEBIN) $(OBJECTS) -o $(FILE_EXE)
	$(CC) $(CFLAGS) $(TESTBIN) $(OBJECTS) $(TEST_OBJECTS) -o $(TEST_EXE)

$(FILEBIN): $(CFILE)
	$(IF_NOT_DIR) $(OBJPATH) $(IF_NOT_THEN_DO) $(MAKE_CALL) BUILD_DIR
	$(IF_NOT_FILE) $(OBJ1) $(IF_NOT_THEN_DO) $(MAKE_CALL) build
	$(IF_NOT_FILE) $(OBJ1) $(IF_NOT_THEN_DO) $(MAKE_CALL) BUILD_OBJ
	$(CC) -c $(CFLAGS) $(CFILE) -o $(FILEBIN)

$(TESTBIN): $(CTEST)
	$(IF_NOT_DIR) $(TEST_OBJPATH) $(IF_NOT_THEN_DO) $(MAKE_CALL) BUILD_DIR
	$(IF_NOT_FILE) $(TEST_OBJ1) $(IF_NOT_THEN_DO) $(MAKE_CALL) build
	$(IF_NOT_FILE) $(TEST_OBJ1) $(IF_NOT_THEN_DO) $(MAKE_CALL) BUILD_OBJ
	$(CC) -c $(CFLAGS) $(CTEST) -o $(TESTBIN)


MAKE_TEST: $(TESTBIN) $(OBJECTS) $(TEST_OBJECTS)
	$(CC) $(CFLAGS) $(TESTBIN) $(OBJECTS) $(TEST_OBJECTS) -o $(TEST_EXE)
	$(MAKE_CALL) clean

MAKE_CORE: $(FILEBIN) $(OBJECTS)
	$(CC) $(CFLAGS) $(FILEBIN) $(OBJECTS) -o $(FILE_EXE)
	$(MAKE_CALL) clean_up

fast: $(FILEBIN) $(OBJECTS)
	$(MAKE_CALL) clean_all
	$(MAKE_CALL) MAKE_CORE
	$(MAKE_CALL) run

retest: $(TESTBIN) $(OBJECTS) $(TEST_OBJECTS)
	$(MAKE_CALL) clean_all
	$(MAKE_CALL) MAKE_TEST
	$(MAKE_CALL) run_test

build:
	$(CP) blankmake Makefile
# $(MAKE_CALL) code here \
	IF $(OBJBUILDS) GTR 0 \
	FOR %%i IN (1,1,$(OBJBUILDS))\
		DO \
		echo( $$(CC) $$(CFLAGS) -c $$(OBJ%%iSRC) -o $$(OBJ%%i)  >> Makefile
#	nmake only \
	IF $(TEST_OBJBUILDS) GTR 0 \
	FOR %%i IN (1,1,$(TEST_OBJBUILDS))\
		DO \
		echo( $$(CC) $$(CFLAGS) -c $$(TEST_OBJ%%iSRC) -o $$(TEST_OBJ%%i)  >> Makefile
#	nmake only effective multiline commenting out # \
	@echo <<
	for num in $(OBJBUILDS); do \
		echo "	"$$"(CC)" $$"(CFLAGS)" -c $$"(OBJ"$${num}"SRC)" -o $$"(OBJ"$${num}")" >> Makefile;\
		done #
	for num in $(TEST_OBJBUILDS); do \
		echo "	"$$"(CC)" $$"(CFLAGS)" -c $$"(TEST_OBJ"$${num}"SRC)" -o $$"(TEST_OBJ"$${num}")" >> Makefile;\
		done #
#		$(foeach var,$(OBJBUILDS),@echo	$$(CC) $$(CFLAGS) -c $$(OBJ%%iSRC) -o $$(OBJ%%i) >> Makefile;) #
#	nmake only # \
<<NOKEEP

run:
	$(FILE_EXE)

run_test:
	$(TEST_EXE)


clean:
	$(IF_DIR) $(BINPATH) $(THEN_DO) $(RM) $(APPS)
	$(IF_DIR) $(BINPATH) $(THEN_DO) $(RMDIR) $(BINPATH)

clean_up:
	$(MAKE_CALL) clean_test
	$(MAKE_CALL) clean_core
	
clean_core:
	$(IF_FILE) $(FILEBIN) $(THEN_DO) $(RM) $(FILEBIN)
	$(IF_FILE) $(OBJ1) $(THEN_DO) $(RM) $(OBJECTS)
	$(IF_DIR) $(OBJPATH) $(THEN_DO) $(RMDIR) $(OBJPATH)


clean_test:
	$(IF_FILE) $(TESTBIN) $(THEN_DO) $(RM) $(TESTBIN)
	$(IF_FILE) $(TEST_OBJ1) $(THEN_DO) $(RM) $(TEST_OBJECTS)
	$(IF_DIR) $(TEST_OBJPATH) $(THEN_DO) $(RMDIR) $(TEST_OBJPATH)
	

clean_all:
	$(MAKE_CALL) clean_up
	$(MAKE_CALL) clean

BUILD_DIR:
	$(IF_NOT_DIR) $(BINPATH) $(IF_NOT_THEN_DO) mkdir $(BINPATH)
	$(IF_NOT_DIR) $(OBJPATH) $(IF_NOT_THEN_DO) mkdir $(OBJPATH)
	$(IF_NOT_DIR) $(TEST_OBJPATH) $(IF_NOT_THEN_DO) mkdir $(TEST_OBJPATH)

BUILD_OBJ:
	@echo building...
#####	VARIABLE BUILD	#####
