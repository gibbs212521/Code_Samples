### app file ending ###
# $(MAKE_CALL) code here 
ifndef 0 # $(FD)	
EXE_FILETYPE:=.exe # $(FD)
FD:=$(FD)# $(FD)
else
# Make code here 
EXE_FILETYPE:=# 
FD:=/#
#
endif

##### CONSTANT BOILER PLATE #######
DIRPATH:=.$(FD)..$(FD)src
BINPATH:=.$(FD)..$(FD)bin
OBJPATH:=.$(FD)..$(FD)obj
TESTPATH:=.$(FD)..$(FD)test
TEST_BINPATH:=$(BINPATH)
TEST_OBJPATH:=$(OBJPATH)

FILENAME:=sample
TESTNAME:=test_sample


INCL= 
CC=gcc
CFLAGS= #-I $(INCL)


TESTBIN:=$(TEST_OBJPATH)$(FD)$(TESTNAME).o
CTEST:=$(TESTPATH)$(FD)$(TESTNAME).c
TEST_EXE:=$(TEST_BINPATH)$(FD)$(TESTNAME)$(EXE_FILETYPE)

SOURCES := $(CTEST)
HEADERS := 
APPS := $(TEST_EXE)

FILEBIN:=$(OBJPATH)$(FD)$(FILENAME).o
CFILE:=$(DIRPATH)$(FD)$(FILENAME).c
FILE_EXE:=$(BINPATH)$(FD)$(FILENAME)$(EXE_FILETYPE)

SOURCES := $(SOURCES) $(CFILE)
HEADERS := $(HEADERS) 
APPS := $(APPS) $(FILE_EXE)


##### VARYING FILE BOILER PLATE #######
UTILPATH:=$(DIRPATH)$(FD)util
OBJ1NAME:=isMagicSquare
OBJ1SRC:=$(UTILPATH)$(FD)$(OBJ1NAME).c
OBJ1HDR:=$(UTILPATH)$(FD)$(OBJ1NAME).h
OBJ1:=$(OBJPATH)$(FD)$(OBJ1NAME).o

SOURCES := $(SOURCES) $(OBJ1SRC)
HEADERS := $(HEADERS) $(OBJ1HDR)
OBJECTS := $(OBJECTS) $(OBJ1)
OBJSRCS := $(SOURCES) $(OBJ1SRC)
OBJBUILDS := 1


UTILPATH:=$(UTILPATH)
OBJ2NAME:=matrixAnalysis
OBJ2SRC:=$(UTILPATH)$(FD)$(OBJ2NAME).c
OBJ2HDR:=$(UTILPATH)$(FD)$(OBJ2NAME).h
OBJ2:=$(OBJPATH)$(FD)$(OBJ2NAME).o

SOURCES := $(SOURCES) $(OBJ2SRC)
HEADERS := $(HEADERS) $(OBJ2HDR)
OBJECTS := $(OBJECTS) $(OBJ2)
OBJSRCS := $(SOURCES) $(OBJ1SRC)
OBJBUILDS := $(OBJBUILDS) 2


UTILPATH:=$(UTILPATH)
OBJ3NAME:=matrixGenerator
OBJ3SRC:=$(UTILPATH)$(FD)$(OBJ3NAME).c
OBJ3HDR:=$(UTILPATH)$(FD)$(OBJ3NAME).h
OBJ3:=$(OBJPATH)$(FD)$(OBJ3NAME).o

SOURCES := $(SOURCES) $(OBJ3SRC)
HEADERS := $(HEADERS) $(OBJ3HDR)
OBJECTS := $(OBJECTS) $(OBJ3)
OBJSRCS := $(OBJSRCS) $(OBJ1SRC)
OBJBUILDS := $(OBJBUILDS) 3


UTILPATH:=$(UTILPATH)
OBJ4NAME:=matriceDisplay
OBJ4SRC:=$(UTILPATH)$(FD)$(OBJ4NAME).c
OBJ4HDR:=$(UTILPATH)$(FD)$(OBJ4NAME).h
OBJ4:=$(OBJPATH)$(FD)$(OBJ4NAME).o

SOURCES := $(SOURCES) $(OBJ4SRC)
HEADERS := $(HEADERS) $(OBJ4HDR)
OBJECTS := $(OBJECTS) $(OBJ4)
OBJSRCS := $(OBJSRCS) $(OBJ1SRC)
OBJBUILDS := $(OBJBUILDS) 4




TEST_OBJ0PATH:=$(TESTPATH)
TEST_OBJ0NAME:=test
TEST_OBJ0SRC:=$(TEST_OBJ0PATH)$(FD)$(TEST_OBJ0NAME).c
TEST_OBJ0HDR:=$(TEST_OBJ0PATH)$(FD)$(TEST_OBJ0NAME).h
TEST_OBJ0:=$(OBJPATH)$(FD)$(TEST_OBJ0NAME).o

SOURCES := $(SOURCES) $(TEST_OBJ0SRC)
HEADERS := $(HEADERS) $(TEST_OBJ0HDR)
TEST_OBJECTS := $(OBJECTS) $(TEST_OBJ0)
TEST_OBJSRCS := $(TEST_OBJSRCS) $(TEST_OBJ0SRC)
TEST_OBJBUILDS := $(TEST_OBJBUILDS) 0


TEST_UTILPATH:=$(TESTPATH)$(FD)util


TEST_OBJ1PATH:=$(TEST_UTILPATH)
TEST_OBJ1NAME:=test_$(OBJ1NAME)
TEST_OBJ1SRC:=$(TEST_OBJ1PATH)$(FD)$(TEST_OBJ1NAME).c
TEST_OBJ1HDR:=$(TEST_OBJ1PATH)$(FD)$(TEST_OBJ1NAME).h
TEST_OBJ1:=$(OBJPATH)$(FD)$(TEST_OBJ1NAME).o

SOURCES := $(SOURCES) $(TEST_OBJ1SRC)
HEADERS := $(HEADERS) $(TEST_OBJ1HDR)
TEST_OBJECTS := $(TEST_OBJECTS) $(TEST_OBJ1)
TEST_OBJSRCS := $(TEST_OBJSRCS) $(TEST_OBJ1SRC)
TEST_OBJBUILDS := $(TEST_OBJBUILDS) 1


TEST_OBJ2PATH:=$(TEST_UTILPATH)
TEST_OBJ2NAME:=test_$(OBJ2NAME)
TEST_OBJ2SRC:=$(TEST_OBJ2PATH)$(FD)$(TEST_OBJ2NAME).c
TEST_OBJ2HDR:=$(TEST_OBJ2PATH)$(FD)$(TEST_OBJ2NAME).h
TEST_OBJ2:=$(OBJPATH)$(FD)$(TEST_OBJ2NAME).o

SOURCES := $(SOURCES) $(TEST_OBJ2SRC)
HEADERS := $(HEADERS) $(TEST_OBJ2HDR)
TEST_OBJECTS := $(TEST_OBJECTS) $(TEST_OBJ2)
OBJSRCS := $(SOURCES) $(TEST_OBJ2SRC)
TEST_OBJBUILDS := $(TEST_OBJBUILDS) 2


TEST_OBJ3PATH:=$(TEST_UTILPATH)
TEST_OBJ3NAME:=test_$(OBJ3NAME)
TEST_OBJ3SRC:=$(TEST_OBJ3PATH)$(FD)$(TEST_OBJ3NAME).c
TEST_OBJ3HDR:=$(TEST_OBJ3PATH)$(FD)$(TEST_OBJ3NAME).h
TEST_OBJ3:=$(OBJPATH)$(FD)$(TEST_OBJ3NAME).o

SOURCES := $(SOURCES) $(TEST_OBJ3SRC)
HEADERS := $(HEADERS) $(TEST_OBJ3HDR)
TEST_OBJECTS := $(TEST_OBJECTS)	$(TEST_OBJ3)
OBJSRCS := $(SOURCES) $(TEST_OBJ3SRC)
TEST_OBJBUILDS := $(TEST_OBJBUILDS) 3



# Code below should allow $(MAKE_CALL) and make to operate successfully
# $(MAKE_CALL) code here $(FD)
ifdef 0# $(FD)
MV=move # $(FD)
RM=del # $(FD)
RMDIR=rmdir # $(FD)
CP=copy # $(FD)
MAKE_CALL=nmake # $(FD)
!else
ifeq (0,0) #
# Make code here 
MV=mv -f # 
RM=rm -f #
RMDIR=rm -rf
CP=cp -f # 
MAKE_CALL=make #
endif #
# $(FD)
!endif 



##### CONSTANT BUILD #######
MAKE: $(FILEBIN) $(TESTBIN) $(OBJECTS) $(TEST_OBJECTS)
	$(CC) $(CFLAGS) $(FILEBIN) $(OBJECTS) -o $(FILE_EXE)
	$(CC) $(CFLAGS) $(TESTBIN) $(OBJECTS) $(TEST_OBJECTS) -o $(TEST_EXE)
	$(MAKE_CALL) clean_up

MAKE_OBJ: $(FILEBIN) $(TESTBIN) $(OBJECTS)
	$(CC) $(CFLAGS) $(FILEBIN) $(OBJECTS) -o $(FILE_EXE)
	$(CC) $(CFLAGS) $(TESTBIN) $(OBJECTS) -o $(TEST_EXE)

fast: $(TESTBIN) $(OBJECTS)
	$(CC) $(CFLAGS) $(OBJECTS) -o $(FILE_EXE)
	$(CC) $(CFLAGS) $(TESTBIN) $(OBJECTS) -o $(TEST_EXE)
	$(MAKE_CALL) clean_up

$(FILEBIN): $(CFILE)
	$(MAKE_CALL) BUILD_DIR
	$(MAKE_CALL) build
	$(MAKE_CALL) BUILD_OBJ
	$(CC) -c $(CFLAGS) $(CFILE) -o $(FILEBIN)

$(TESTBIN): $(CTEST)
	$(MAKE_CALL) build
	$(CC) -c $(CFLAGS) $(CTEST) -o $(TESTBIN)
	$(MAKE_CALL) BUILD_OBJ


MAKE_TEST: $(TESTBIN) $(OBJECTS) $(TEST_OBJECTS)
	$(CC) $(CFLAGS) $(TESTBIN) $(OBJECTS) $(TEST_OBJECTS) -o $(TEST_EXE)
	$(MAKE_CALL) clean_up

MAKE_CORE: $(FILEBIN) $(OBJECTS)
	$(CC) $(CFLAGS) $(FILEBIN) $(OBJECTS) -o $(FILE_EXE)
	$(MAKE_CALL) clean_up

build::
	$(CP) blankmake Makefile
	FOR %%i IN ($(TEST_OBJBUILDS))$(FD)
		DO $(FD)
		@echo( $$(CC) $$(CFLAGS) -c $$(TEST_OBJ%%iSRC) -o $$(TEST_OBJ%%i) >> Makefile
	FOR %%i IN ($(OBJBUILDS))$(FD)
		DO $(FD)
		@echo( $$(CC) $$(CFLAGS) -c $$(OBJ%%iSRC) -o $$(OBJ%%i) >> Makefile

run:
	($(FILE_EXE))

test:
	($(TEST_EXE))

array_test:
	($(TEST_EXE)) ARGS="3 {{4,9,2},{3,5,7},{8,1,6}}"

clean:
	$(RM) $(APPS)
	$(RMDIR) $(BINPATH)

clean_up:
	$(RM) $(FILEBIN) $(TESTBIN) $(OBJECTS) $(TEST_OBJECTS)
	$(RMDIR) $(OBJPATH)

clean_all:
	$(MAKE_CALL) clean_up
	$(MAKE_CALL) clean

BUILD_DIR:
	mkdir $(BINPATH)
	mkdir $(OBJPATH)
	
BUILD_OBJ:
	@echo building...
#####	VARIABLE BUILD	#####
